// vars
Перем АдресСервера;
Перем Токен;
Перем Соединение;
Перем Заголовок;

Процедура ЗаполнитьДанныеИзОтветаJSON(Результат, ТекстJSON, ТипДанных)
	ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));	
	НомерЗначения = 0;
	
	Пока ТекстJSON <> "" Цикл
		ПервыйСимвол = Лев(ТекстJSON, 1);
		Если ПервыйСимвол = "{" Тогда
			Значение = Новый Структура;
			ЗаполнитьДанныеИзОтветаJSON(Значение, ТекстJSON, "Структура");
			
			Если ТипДанных = "Структура" Тогда
				Результат.Вставить("Значение" + ?(НомерЗначения = 0, "", НомерЗначения), Значение);
				НомерЗначения = НомерЗначения + 1;
			ИначеЕсли ТипДанных = "Массив" Тогда
				Результат.Добавить(Значение);
			КонецЕсли;
		ИначеЕсли ПервыйСимвол = "[" Тогда
			Значение = Новый Массив;
			ЗаполнитьДанныеИзОтветаJSON(Значение, ТекстJSON, "Массив");
			
			Если ТипДанных = "Структура" Тогда
				Результат.Вставить("Значение" + ?(НомерЗначения = 0, "", НомерЗначения), Значение);
				НомерЗначения = НомерЗначения + 1;
			Иначе
				Результат.Добавить(Значение);
			КонецЕсли;
		ИначеЕсли ПервыйСимвол = "}" И ТипДанных = "Структура" Тогда
			ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));
			Если Лев(ТекстJSON, 1) = "," Тогда
				ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));
			КонецЕсли;
			
			Возврат;
		ИначеЕсли ПервыйСимвол = "]" И ТипДанных = "Массив" Тогда
			ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));
			Если Лев(ТекстJSON, 1) = "," Тогда
				ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));
			КонецЕсли;
			
			Возврат;
		Иначе
			Если ТипДанных = "Структура" Тогда
				
				Поз = Найти(ТекстJSON, ":");
				Если Поз = 0 Тогда
					Прервать;
				КонецЕсли;
				
				ИмяЗначения = СокрЛП(Лев(ТекстJSON, Поз-1));
				
				ТекстJSON = СокрЛП(Сред(ТекстJSON, Поз+1));
				
				Если Лев(ТекстJSON, 1) = "{" Тогда
					Значение = Новый Структура;
					ЗаполнитьДанныеИзОтветаJSON(Значение, ТекстJSON, "Структура");
				ИначеЕсли Лев(ТекстJSON, 1) = "[" Тогда
					Значение = Новый Массив;
					ЗаполнитьДанныеИзОтветаJSON(Значение, ТекстJSON, "Массив");
				Иначе
					Поз = 0;
					Для Сч = 1 По СтрДлина(ТекстJSON) Цикл
						Символ = Сред(ТекстJSON, Сч, 1);
						Если Символ = "," ИЛИ Символ = "]" ИЛИ Символ = "}" Тогда
							Поз = Сч;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если Поз = 0 Тогда
						Значение = ТекстJSON;
						ТекстJSON = "";
					Иначе
						Значение = Лев(ТекстJSON, Поз-1);
						ТекстJSON = СокрЛП(Сред(ТекстJSON, Поз + ?(Сред(ТекстJSON, Поз, 1) = ",", 1, 0)));
					КонецЕсли;
					
					Значение = СокрЛП(Значение);
				КонецЕсли;
				
				Результат.Вставить(ИмяЗначения, Значение);
			ИначеЕсли ТипДанных = "Массив" Тогда
				Поз = 0;
				Для Сч = 1 По СтрДлина(ТекстJSON) Цикл
					Символ = Сред(ТекстJSON, Сч, 1);
					Если Символ = "," ИЛИ Символ = "]" ИЛИ Символ = "}" Тогда
						Поз = Сч;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если Поз = 0 Тогда
					Значение = ТекстJSON;
					ТекстJSON = "";
				Иначе
					Значение = Лев(ТекстJSON, Поз-1);
					ТекстJSON = СокрЛП(Сред(ТекстJSON, Поз + ?(Сред(ТекстJSON, Поз, 1) = ",", 1, 0)));
				КонецЕсли;
				
				Значение = СокрЛП(Значение);
				
				Результат.Добавить(Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ЗаполнитьСтруктуруИзОтветаJSON(Знач ТекстJSON) Экспорт
	Результат = Новый Структура;
	
	ТекстJSON = СтрЗаменить(ТекстJSON, "\""", """");
	ТекстJSON = СтрЗаменить(ТекстJSON, """", "");	
	Если Лев(ТекстJSON, 1) = "{" Тогда
		ЗаполнитьДанныеИзОтветаJSON(Результат, ТекстJSON, "Структура");
	ИначеЕсли Лев(ТекстJSON, 1) = "[" Тогда
		МассивДанных = Новый Массив;
		ЗаполнитьДанныеИзОтветаJSON(МассивДанных, ТекстJSON, "Массив");
		
		Результат.Вставить("Значение", МассивДанных);
	КонецЕсли;
		
	Возврат Результат;
КонецФункции

Функция ПолучитьДанныеИзОтвета(Ответ)
 	ОтветСтрокой = Ответ.ПолучитьТелоКакСтроку();
		
	Если Ответ.КодСостояния = 200 Тогда
		Данные = ЗаполнитьСтруктуруИзОтветаJSON(ОтветСтрокой);
	    Возврат Данные;
	ИначеЕсли Ответ.КодСостояния = 400 тогда
		Данные = ЗаполнитьСтруктуруИзОтветаJSON(ОтветСтрокой);
		ВызватьИсключение("Ошибка: " + Данные.message);
	Иначе
		ВызватьИсключение("HTTP ошибка: " + Ответ.КодСостояния);
	КонецЕсли;		
КонецФункции

Процедура Авторизация(ТокенКлиента) Экспорт
	Токен = ТокенКлиента;	
КонецПроцедуры

Процедура СменитьСервер(Адрес, ЗащищенноеСоединение) Экспорт
	АдресСервера = Адрес;
	Если ЗащищенноеСоединение Тогда
		Соединение = Новый HTTPСоединение(АдресСервера,,,,,, Новый ЗащищенноеСоединениеOpenSSL());
	Иначе
		Соединение = Новый HTTPСоединение(АдресСервера);
	КонецЕсли;
КонецПроцедуры

Функция СклонятьРусский(лемма) Экспорт
	ТекстЗапроса = "/russian/declension?s=" + лемма;
	Если Токен <> null Тогда
		ТекстЗапроса = ТекстЗапроса + "&token=" + Токен;
	КонецЕсли;
	
	Запрос = Новый HTTPЗапрос(ТекстЗапроса);	
	Запрос.Заголовки = Заголовок;
	
	Ответ = Соединение.Получить(Запрос);
	Данные = ПолучитьДанныеИзОтвета(Ответ);
	Возврат Данные;	
КонецФункции

Функция СклонятьУкраинский(лемма) Экспорт
	ТекстЗапроса = "/ukrainian/declension?s=" + лемма;
	Если Токен <> null Тогда
		ТекстЗапроса = ТекстЗапроса + "&token=" + Токен;
	КонецЕсли;
	
	Запрос = Новый HTTPЗапрос(ТекстЗапроса);	
	Запрос.Заголовки = Заголовок;
	
	Ответ = Соединение.Получить(Запрос);
	Данные = ПолучитьДанныеИзОтвета(Ответ);
	Возврат Данные;	
КонецФункции

Функция ПрописьРусский(число, ЕдиницаИзмерения) Экспорт
	ТекстЗапроса = "/russian/spell?n=" + число + "&unit=" + ЕдиницаИзмерения;
	Если Токен <> null Тогда
		ТекстЗапроса = ТекстЗапроса + "&token=" + Токен;
	КонецЕсли;
	
	Запрос = Новый HTTPЗапрос(ТекстЗапроса);	
	Запрос.Заголовки = Заголовок;
	
	Ответ = Соединение.Получить(Запрос);
	Данные = ПолучитьДанныеИзОтвета(Ответ);
	Возврат Данные;	
КонецФункции

Функция ПрописьУкраинский(число, ЕдиницаИзмерения) Экспорт
	ТекстЗапроса = "/ukrainian/spell?n=" + число + "&unit=" + ЕдиницаИзмерения;
	Если Токен <> null Тогда
		ТекстЗапроса = ТекстЗапроса + "&token=" + Токен;
	КонецЕсли;
	
	Запрос = Новый HTTPЗапрос(ТекстЗапроса);	
	Запрос.Заголовки = Заголовок;
	
	Ответ = Соединение.Получить(Запрос);
	Данные = ПолучитьДанныеИзОтвета(Ответ);
	Возврат Данные;	
КонецФункции

Функция СклонятьПрилагательноеПоРодам(прилагательное) Экспорт
	ТекстЗапроса = "/russian/genders?s=" + прилагательное; 
	Если Токен <> null Тогда
		ТекстЗапроса = ТекстЗапроса + "&token=" + Токен;
	КонецЕсли;
	
	Запрос = Новый HTTPЗапрос(ТекстЗапроса);	
	Запрос.Заголовки = Заголовок;
	
	Ответ = Соединение.Получить(Запрос);
	Данные = ПолучитьДанныеИзОтвета(Ответ);
	Возврат Данные;	
КонецФункции

Функция ОбразоватьПрилагательные(лемма) Экспорт
	ТекстЗапроса = "/russian/adjectivize?s=" + лемма; 
	Если Токен <> null Тогда
		ТекстЗапроса = ТекстЗапроса + "&token=" + Токен;
	КонецЕсли;
	
	Запрос = Новый HTTPЗапрос(ТекстЗапроса);	
	Запрос.Заголовки = Заголовок;
	
	Ответ = Соединение.Получить(Запрос);
	Данные = ПолучитьДанныеИзОтвета(Ответ);
	Возврат Данные;			
КонецФункции


// default init
Токен = null;
АдресСервера = "ws3.morpher.ru";
Соединение = Новый HTTPСоединение(АдресСервера,,,,,, Новый ЗащищенноеСоединениеOpenSSL());

Заголовок = Новый Соответствие();
Заголовок.Вставить("Accept", "application/json");	